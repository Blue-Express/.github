name: Template - NodeJS on AWS EKS

on:
  push:
    branches: [development, staging, production]
    paths-ignore:
      - '.github/workflows/**'

  workflow_dispatch:

jobs:
  validate-oas:
    runs-on: ubuntu-latest
    container:
      image: shesse/redoc-cli:1.0.1
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: Validate open api spec (redoc CLI)
        run: npx @redocly/cli lint oas/oas.yaml
        
  api-ui:
    uses: Blue-Express/bx_templates/.github/workflows/build-api-ui.yaml@blue
    needs: validate-oas
    with:
      environment: development #${{ github.ref_name }}
      namespace: dev-ns-digitacion
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID  }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY  }}
      AWS_REGION: ${{ secrets.AWS_REGION  }}
      AWS_ASSUME_ROLE: ${{ secrets.AWS_ASSUME_ROLE }}
      TOKEN_REPO_TEMPLATE: ${{ secrets.REPO_HELM_ACCESS }}

  sonar:
    runs-on: ubuntu-latest 
    environment:
      name: "development"
      url: https://desa-sonar.bluex.cl/dashboard?id=${{ github.event.repository.name }}
    steps:      
      - uses: actions/checkout@v2
      - name: SonarQube Scan
        uses: Blue-Express/sonar-scan-action@master
        
        id: check
        with:
          sonarqube_url: ${{ secrets.SONARQUBE_DEV_URL }}
          sonarqube_token: ${{ secrets.SONARQUBE_DEV_TOKEN }}
          projectKey: ${{ github.event.repository.name }}

  build:
    uses: Blue-Express/bx_templates/.github/workflows/build-and-push-nodejs.yml@blue
    needs: [api-ui, sonar]
    with:
      install-pkg: 'npm'
      environment: ${{ github.ref_name }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID  }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY  }}
      AWS_REGION: ${{ secrets.AWS_REGION  }}
      AWS_ASSUME_ROLE: ${{ secrets.AWS_ASSUME_ROLE }}
      
  deploy:
    uses: Blue-Express/bx_templates/.github/workflows/deploy-helm-node-api.yml@blue
    needs: build
    with:
      environment: ${{ github.ref_name }}
      namespace: ns-name                              # Reemplazar al correspondiente
      path-values: helm/values-${{ github.ref_name }}.yml
      base-path: /api/domain/v1                       # Reemplazar
      liveness-path: /health/liveness
      liveness-initialDelay: '30'
      liveness-periodoSeconds: '45'
      liveness-timeoutSeconds: '20'
      ingress-enabled: true                           # true (expuesto) - false (interno)
      ingress-groupname: ingrz-namespace              # Reemplazar {namespace} por el {name} del NS
      cpu-base: '50m'
      memory-base: '128Mi'
      cpu-limit: '200m'
      memory-limit: '380Mi'
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_KUBECONFIG: ${{ secrets.AWS_KUBECONFIG }}
      TOKEN_REPO_TEMPLATE: ${{ secrets.REPO_HELM_ACCESS }}
      SECRETOS: ${{ toJSON(secrets) }}
      AWS_ASSUME_ROLE: ${{ secrets.AWS_ASSUME_ROLE }}

  api-mgnt:
    uses: Blue-Express/bx_templates/.github/workflows/kong.yml@blue
    needs: deploy
    with:
      environment: ${{ github.ref_name }}
      kong-srv-protocol: '"http"'
      kong-srv-host: ${{ needs.deploy.outputs.ingress }}
      kong-srv-port: '80'
      kong-cnsr: 'front-cnsr'
      kong-srv-path: '/api/domain/v1'               # Reemplazar con el mismo del {base-path}
      kong-rts-protocol: '"http","https"'
      kong-rts-path: '/api/domain/v1'               # Reemplazar con el mismo del {kong-srv-path} (expuesta a inet)
      kong-rts-methods: '"GET", "POST", "HEAD", "OPTIONS", "CONNECT", "PUT", "DELETE"'
      kong-plugins:  '"jwt-keycloak" "key-auth" "cors"'
      kong-cors-dev: '"http://localhost:3000","https://localhost:3000","https://dev.blue.cl"'
      kong-cors-qa: '"http://qa.blue.cl","https://qa.blue.cl"'
      kong-cors-prod: '"http://blue.cl","https://blue.cl"'
      kong-cors-methods: '"GET", "POST", "DELETE", "PATCH", "PUT", "HEAD", "OPTIONS", "TRACE", "CONNECT"'
      kong-jwt-allowed-iss: '/auth/realms/name'     # Si se encuentra habilitado {kong-plugins: '"jwt-keycloak"}, se debe definir.
    secrets:
      TOKEN_REPO_TEMPLATE: ${{ secrets.REPO_HELM_ACCESS  }}
      KONG_HOST: ${{ secrets.KONG_HOST }}
      AWS_REGION: ${{ secrets.AWS_REGION  }}
      KEYCLOAK_HOST: ${{ secrets.KEYCLOAK_HOST  }}
