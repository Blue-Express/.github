name: Template - NodeJS Consumers on AWS EKS

on:
  push:
    branches: [development, staging, production]
    paths-ignore:
      - '.github/workflows/**'

  workflow_dispatch:

jobs:
  sonar-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: SonarQube Scan Workflow for Node.js
        uses: Blue-Express/bx-templates/sonarqube-scan-node@blue
        with:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_V3 }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL_V3 }}
          project-key: ${{ github.event.repository.name }}
          node-version: '18'        # 18 o '20', según corresponda
          package-manager: 'npm'    # npm o 'yarn', según corresponda 
          test-framework: 'jest'    # jest o 'mocha', según corresponda
          sonarVervose: 'false'     # Optional. Default: "false".
          sonarExclusions: ''       # Opcional: especifica archivos o carpetas a excluir.
          coverageExclusions: ''    # Opcional: especifica archivos o carpetas a excluir de la cobertura.
  sonar-url:
    needs: sonar-scan
    if: always()
    runs-on: ubuntu-latest
    environment:
      name: "sonar"
      url: https://sonarqube.infra.blue.cl/dashboard?id=${{ github.event.repository.name }}
    steps:
      - name: Información de SonarQube
        run: echo "El análisis de SonarQube se ha completado."
  
  build:
    uses: Blue-Express/bx_templates/.github/workflows/build-and-push-nodejs.yml@blue
    needs: sonar-scan
    with:
      install-pkg: 'npm'
      environment: ${{ github.ref_name }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID  }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY  }}
      AWS_REGION: ${{ secrets.AWS_REGION  }}
      AWS_ASSUME_ROLE: ${{ secrets.AWS_ASSUME_ROLE }}
      
  deploy:
    uses: Blue-Express/bx_templates/.github/workflows/deploy-helm-node-api.yml@blue
    needs: build
    with:
      # iamServiceAccount: <service_account>
      environment: ${{ github.ref_name }}
      namespace: ns-development       # Reemplazar con el ns correspondiente
      path-values: helm/values-${{ github.ref_name }}.yml
      base-path: /api/development/v1    # Se debe definir de acuerdo al live path de la aplicación.
      liveness-path: /actuator/health
      liveness-initialDelay: '180'
      liveness-periodoSeconds: '45'
      liveness-timeoutSeconds: '20'
      # Recursos Default
      cpu-base: '10m'
      memory-base: '64Mi'
      cpu-limit: '400m'
      memory-limit: '500Mi'
      replicas: '1'
      # Límite Recursos Dev
      cpu-limit-dev: '200m'
      memory-limit-dev: '380Mi'
      replicas-dev: '1'
      # Límite Recursos Qa
      cpu-limit-qa: '400m'
      memory-limit-qa: '380Mi'
      replicas-qa: '1'
      # Límite Recursos Prod
      cpu-limit-prod: '400m'
      memory-limit-prod: '380Mi'
      replicas-prod: '3'
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_KUBECONFIG: ${{ secrets.AWS_KUBECONFIG }}
      TOKEN_REPO_TEMPLATE: ${{ secrets.REPO_HELM_ACCESS }}
      SECRETOS: ${{ toJSON(secrets) }}
      AWS_ASSUME_ROLE: ${{ secrets.AWS_ASSUME_ROLE }}
