name: Template - Python API on GCP GKE

on:
  push:
    branches: [development, staging, production]
    paths-ignore:
      - '.github/workflows/**'
    
  workflow_dispatch:

jobs:
  sonar:
    uses: Blue-Express/bx_templates/.github/workflows/pr-sonar-python.yml@blue
    secrets:
      SONARQUBE_DEV_URL_V2: ${{ secrets.SONARQUBE_DEV_URL_V2 }}
      SONARQUBE_DEV_TOKEN_V2: ${{ secrets.SONARQUBE_DEV_TOKEN_V2 }}
      TOKEN_REPO_TEMPLATE: ${{ secrets.TOKEN_REPO_TEMPLATE }}

  build-and-push-ecr:
    uses: Blue-Express/bx-templates/.github/workflows/build-and-push-python-gcp.yml@blue
    needs: sonar
    with:
      environment: ${{ github.ref_name }}
    secrets:
      GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID  }}
      GCP_REGION: ${{ secrets.GCP_REGION  }}
      GCP_WIP_PROVIDER: ${{ secrets.GCP_WIP_PROVIDER }}

  deploy:
    uses: Blue-Express/bx-templates/.github/workflows/deploy-helm-python-gcp.yml@blue
    needs: build-and-push-ecr
    with:
      environment: ${{ github.ref_name }}
      namespace: ns-labs
      path-values: helm/values-${{ github.ref_name }}.yml
      base-path: /api/python/v1/sample
      liveness-path: /health/liveness
      liveness-initialDelay: '10'
      liveness-periodoSeconds: '5'
      liveness-timeoutSeconds: '15'
      ingress-enabled: true
      ingress-groupname: ingrz-labs
      cpu-base: '10m'
      memory-base: '64Mi'
      cpu-limit: '200m'
      memory-limit: '380Mi'
    secrets:
      TOKEN_REPO_TEMPLATE: ${{ secrets.REPO_HELM_ACCESS }}
      SECRETOS: ${{ toJSON(secrets) }}
      GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      GCP_CLUSTER_ID: ${{ secrets.GCP_CLUSTER_ID }}
      GCP_REGION: ${{ secrets.GCP_REGION }}
      GCP_ZONE: ${{ secrets.GCP_ZONE }}
      GCP_WIF_PROJECT_ID: ${{ secrets.GCP_WIF_PROJECT_ID }}
      GCP_WIF: ${{ secrets.GCP_WIF }}


  # api-mgnt:
  #   uses: Blue-Express/bx_templates/.github/workflows/kong.yml@blue
  #   needs: deploy
  #   with:
  #     environment: ${{ github.ref_name }}
  #     kong-srv-protocol: '"http"'
  #     kong-srv-host: ${{ needs.deploy.outputs.ingress }}
  #     kong-srv-port: '80'
  #     kong-cnsr: 'front-cnsr'
  #     kong-srv-path: '/api/domain/v1'
  #     kong-rts-protocol: '"http","https"'
  #     kong-rts-path: '/api/domain/v1'
  #     kong-rts-methods: '"GET", "POST", "HEAD", "OPTIONS", "CONNECT", "PUT", "DELETE"'
  #     kong-plugins:  '"jwt-keycloak" "key-auth" "cors"'
  #     kong-cors-dev: '"http://localhost:3000","https://localhost:3000","https://dev.blue.cl"'
  #     kong-cors-qa: '"http://qa.blue.cl","https://qa.blue.cl"'
  #     kong-cors-prod: '"http://blue.cl","https://blue.cl"'
  #     kong-cors-methods: '"GET", "POST", "DELETE", "PATCH", "PUT", "HEAD", "OPTIONS", "TRACE", "CONNECT"'
  #     kong-jwt-allowed-iss: '/auth/realms/name'
  #   secrets:
  #     TOKEN_REPO_TEMPLATE: ${{ secrets.REPO_HELM_ACCESS  }}
  #     KONG_HOST: ${{ secrets.KONG_HOST }}
  #     AWS_REGION: ${{ secrets.AWS_REGION  }}
  #     KEYCLOAK_HOST: ${{ secrets.KEYCLOAK_HOST  }}
