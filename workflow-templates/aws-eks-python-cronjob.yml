name: python-cronjob-pipeline
# example in https://github.com/Blue-Express/bx-cron-cicd-poc-python
on:
  push:
    branches: [development, staging, production]
    paths-ignore:
      - '.github/**'

  workflow_dispatch:

jobs:
  sonar-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: SonarQube Scan Workflow for Python
        uses: Blue-Express/bx-templates/sonarqube-scan-python@blue
        with:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          project-key: ${{ github.event.repository.name }}
          python-version: '3.12'    # 3.12 o latest, según corresponda.
          test-framework: 'pytest'  # pytest o 'unittest', según corresponda.
          sonarVerbose: 'false'     # Optional. Default: "false".
          sonarExclusions: ''       # Opcional: especifica archivos o carpetas a excluir.
          coverageExclusions: ''    # Opcional: especifica archivos o carpetas a excluir de la cobertura.
  sonar-url:
    needs: sonar-scan
    if: always()
    runs-on: ubuntu-latest
    environment:
      name: "sonar"
      url: https://sonarqube.infra.blue.cl/dashboard?id=${{ github.event.repository.name }}
    steps:
      - name: Información de SonarQube
        run: echo "El análisis de SonarQube se ha completado."

  build-and-push-ecr:
    uses: Blue-Express/bx_templates/.github/workflows/push-python-ecr.yml@blue
    needs: sonar-scan
    with:
      environment: ${{ github.ref_name }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID  }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY  }}
      AWS_REGION: ${{ secrets.AWS_REGION  }}
      AWS_ASSUME_ROLE: ${{ secrets.AWS_ASSUME_ROLE }}

### deploy cronjob
  deploy:
    uses: Blue-Express/bx_templates/.github/workflows/deploy-helm-python-cronjob.yml@blue
    needs: build-and-push-ecr
    with:
      schedule: '* * * * *'
      environment: ${{ github.ref_name }}
      namespace: ns-namespace # ns-{ nombre namespace }
      path-values: helm/values-${{ github.ref_name }}.yml
      success-history: '3'
      failed-history: '3'
      seconds-finished: '100'
      backoff-limit: '3'
      concurrencyPolicy: Forbid
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_KUBECONFIG: ${{ secrets.AWS_KUBECONFIG }}
      AWS_ASSUME_ROLE: ${{ secrets.AWS_ASSUME_ROLE }}
      TOKEN_REPO_TEMPLATE: ${{ secrets.REPO_HELM_ACCESS }}
      SECRETOS: ${{ toJSON(secrets) }}
