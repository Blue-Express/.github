name: Template - Python SQS Consumer on AWS EKS

on:
  push:
    branches: [development, staging, production]
    paths-ignore:
      - '.github/workflows/**'
  workflow_dispatch:

jobs:
  sonar:
    uses: Blue-Express/bx_templates/.github/workflows/pr-sonar-java.yml@blue
    secrets:
      SONARQUBE_DEV_URL: ${{ secrets.SONARQUBE_DEV_URL }}
      SONARQUBE_DEV_TOKEN: ${{ secrets.SONARQUBE_DEV_TOKEN }}
      TOKEN_REPO_TEMPLATE: ${{ secrets.TOKEN_REPO_TEMPLATE }}
  
  build:
    uses: Example-Express/bx_templates/.github/workflows/build-and-push-python.yml@blue
    needs: sonar
    with:
      install-pkg: 'pip'
      environment: ${{ github.ref_name }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID  }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY  }}
      AWS_REGION: ${{ secrets.AWS_REGION  }}
      AWS_ASSUME_ROLE: ${{ secrets.AWS_ASSUME_ROLE }}
      
  deploy:
    uses: Example-Express/bx_templates/.github/workflows/deploy-helm-python-api.ymll@blue
    needs: build
    with:
      environment: ${{ github.ref_name }}
      namespace: ns-development
      path-values: helm/values-${{ github.ref_name }}.yml
      base-path: /api/development/v1    
      
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_KUBECONFIG: ${{ secrets.AWS_KUBECONFIG }}
      TOKEN_REPO_TEMPLATE: ${{ secrets.REPO_HELM_ACCESS }}
      SECRETOS: ${{ toJSON(secrets) }}
      AWS_ASSUME_ROLE: ${{ secrets.AWS_ASSUME_ROLE }}

  create-sqs-and-send-message:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: AWS Context
        run: |
          aws sts get-caller-identity > sts_output.json
          export AWS_ACCOUNT_ID=$(jq -r '.Account' sts_output.json)
          echo "AWS Account ID: $AWS_ACCOUNT_ID"

      - name: Create AWS SQS Queue
        run: aws sqs create-queue --queue-name my-queue --region us-east-2 --output json
        id: create-sqs
        env:
          AWS_ACCOUNT_ID: ${{ env.AWS_ACCOUNT_ID }}

      - name: Send message to SQS
        run: aws sqs send-message --queue-url https://sqs.us-east-2.amazonaws.com/${{ env.AWS_ACCOUNT_ID }}/my-queue --message-body "Hello, SQS!"
