name: Template - Java Consumer on AWS EKS

on:
  push:
    branches: [ development, staging, production ]
    paths-ignore:
      - '.github/workflows/**'

  workflow_dispatch:

jobs:
  sonar:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17' # The JDK version to make available on the path.
          java-package: jdk # (jre, jdk, or jdk+fx) - defaults to jdk
          architecture: x64
          distribution: 'temurin'
      - name: Checkstyle
        run: mvn checkstyle:checkstyle -DskipTests
      - name: SonarqubeV2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONARQUBE_DEV_TOKEN_V2 }}
          SONAR_HOST_URL: ${{ secrets.SONARQUBE_DEV_URL_V2 }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=${{ github.event.repository.name }}
      - name: Read value from Properties-file check Quality Gate
        id: read_property
        uses: christian-draeger/read-properties@1.0.1
        with:
          path: './target/sonar/report-task.txt'
          property: 'ceTaskId'
      - name: Show ceTaskId
        run: echo ${{ steps.read_property.outputs.value }}
      - name: Show Github ref
        run: echo ${{ github.ref }}
      - name: Break Build Quality Gate
        run: sh ./break_build.sh ${{ secrets.SONARQUBE_DEV_URL_V2 }} ${{ secrets.SONARQUBE_DEV_TOKEN_V2 }} ${{ steps.read_property.outputs.value }}

  build:
    uses: Blue-Express/bx_templates/.github/workflows/build-java17.yml@blue
    needs: [ sonar ]
    
  push-img:
    uses: Blue-Express/bx_templates/.github/workflows/push-java.yml@blue
    needs: build
    with:
      environment: ${{ github.ref_name }}
    secrets:
      AWS_ASSUME_ROLE: ${{ secrets.AWS_ASSUME_ROLE }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}

  deploy:
    uses: Blue-Express/bx_templates/.github/workflows/deploy-helm-java-api.yml@blue
    needs: push-img
    with:
      # iamServiceAccount:            # Habilitar y agregar de ser necesario
      environment: ${{ github.ref_name }}
      namespace: ns-{namespace}      # Agregar namespace
      path-values: helm/values-${{ github.ref_name }}.yml
      base-path: /api/domain/v1    # Modificar según corresponda
      liveness-path: /health/liveness
      liveness-initialDelay: '180'
      liveness-periodoSeconds: '45'
      liveness-timeoutSeconds: '20'
      # ingress-enabled: true                           # true (expuesto) - false (interno)
      # ingress-groupname: ingrz-{namespace}            # Habilitar si corresponde
      # iamServiceAccount: default
      # Recursos Default
      cpu-base: '10m'
      memory-base: '64Mi'
      cpu-limit: '400m'
      memory-limit: '500Mi'
      replicas: '1'
      # Límite Recursos Dev
      cpu-limit-dev: '200m'
      memory-limit-dev: '380Mi'
      replicas-dev: '1'
      # Límite Recursos Qa
      cpu-limit-qa: '400m'
      memory-limit-qa: '380Mi'
      replicas-qa: '1'
      # Límite Recursos Prod
      cpu-limit-prod: '400m'
      memory-limit-prod: '380Mi'
      replicas-prod: '3' 
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_KUBECONFIG: ${{ secrets.AWS_KUBECONFIG }}
      TOKEN_REPO_TEMPLATE: ${{ secrets.REPO_HELM_ACCESS }}
      SECRETOS: ${{ toJSON(secrets) }}
      AWS_ASSUME_ROLE: ${{ secrets.AWS_ASSUME_ROLE }}

