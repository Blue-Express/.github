name: Template - Java Consumer on AWS EKS

on:
  push:
    branches: [ development, staging, production ]
    paths-ignore:
      - '.github/workflows/**'

  workflow_dispatch:

jobs:
  sonar-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: SonarQube Scan Workflow for Java
        uses: Blue-Express/bx-templates/sonarqube-scan-java@blue
        with:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_V3 }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL_V3 }}
          java-version: '17'      # Allowed versions: "17", "21".
          build-system: 'maven'   # Allowed values: "maven", "gradle".
          coverage-tool: 'jacoco' # Allowed values: "jacoco".
          sonarVervose: 'false'   # Optional. Default: "false".
          sonarExclusions: ''     # Optional. Example: '**/entities/*.java,**/entity/*.java,**/dto/*.java'
          coverageExclusions: ''  # Optional.
  sonar-url:
    needs: sonar-scan
    runs-on: ubuntu-latest
    environment:
      name: "sonar"
      url: https://sonarqube.infra.blue.cl/dashboard?id=${{ github.event.repository.name }}
    steps:
      - name: Información de SonarQube
        run: echo "El análisis de SonarQube se ha completado."

  build:
    uses: Blue-Express/bx_templates/.github/workflows/build-java17.yml@blue
    needs: [ sonar-scan ]
    
  push-img:
    uses: Blue-Express/bx_templates/.github/workflows/push-java.yml@blue
    needs: build
    with:
      environment: ${{ github.ref_name }}
    secrets:
      AWS_ASSUME_ROLE: ${{ secrets.AWS_ASSUME_ROLE }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}

  deploy:
    uses: Blue-Express/bx_templates/.github/workflows/deploy-helm-java-api.yml@blue
    needs: push-img
    with:
      # iamServiceAccount:            # Habilitar y agregar de ser necesario
      environment: ${{ github.ref_name }}
      namespace: ns-{namespace}      # Agregar namespace
      path-values: helm/values-${{ github.ref_name }}.yml
      base-path: /api/domain/v1    # Modificar según corresponda
      liveness-path: /health/liveness
      liveness-initialDelay: '180'
      liveness-periodoSeconds: '45'
      liveness-timeoutSeconds: '20'
      # ingress-enabled: true                           # true (expuesto) - false (interno)
      # ingress-groupname: ingrz-{namespace}            # Habilitar si corresponde
      # iamServiceAccount: default
      # Recursos Default
      cpu-base: '10m'
      memory-base: '64Mi'
      cpu-limit: '400m'
      memory-limit: '500Mi'
      replicas: '1'
      # Límite Recursos Dev
      cpu-limit-dev: '200m'
      memory-limit-dev: '380Mi'
      replicas-dev: '1'
      # Límite Recursos Qa
      cpu-limit-qa: '400m'
      memory-limit-qa: '380Mi'
      replicas-qa: '1'
      # Límite Recursos Prod
      cpu-limit-prod: '400m'
      memory-limit-prod: '380Mi'
      replicas-prod: '3' 
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_KUBECONFIG: ${{ secrets.AWS_KUBECONFIG }}
      TOKEN_REPO_TEMPLATE: ${{ secrets.REPO_HELM_ACCESS }}
      SECRETOS: ${{ toJSON(secrets) }}
      AWS_ASSUME_ROLE: ${{ secrets.AWS_ASSUME_ROLE }}

